name: Build Multi-Platform

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            pkg-config \
            libabsl-dev \
            libgtkmm-4.0-dev \
            libgtk-4-dev \
            git \
            patchelf \
            libglib2.0-bin \
            libgdk-pixbuf2.0-bin \
            adwaita-icon-theme

      - name: BUILD ABSEIL BECAUSE UBUNTU
        run: |
          git clone https://github.com/abseil/abseil-cpp.git
          cd abseil-cpp
          cmake -B build -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_BUILD_TYPE=Release
          cmake --build build -j$(nproc)
          sudo cmake --install build

      - name: Configure CMake
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build --config Release

      - name: Bundle Linux runtime and libraries (recursive)
        shell: bash
        run: |
          set -euo pipefail
          ROOT="$PWD/build/dist"
          mkdir -p "$ROOT/lib" "$ROOT/share"
          cp build/EMPE "$ROOT/"

          copy_deps() {
            local bin="$1"
            ldd "$bin" | awk '/=> \// {print $3} /^\/lib/ {print $1}' | while read -r lib; do
              [ -f "$lib" ] || continue
              local base="$(basename "$lib")"
              if [ ! -f "$ROOT/lib/$base" ]; then
                cp -L "$lib" "$ROOT/lib/" || true
              fi
            done
          }

          recursive_copy() {
            local changed=1
            while [ "$changed" -eq 1 ]; do
              changed=0
              copy_deps "$ROOT/EMPE"
              for so in "$ROOT"/lib/*.so*; do
                [ -f "$so" ] || continue
                before="$(ls -1 "$ROOT/lib" | wc -l || true)"
                copy_deps "$so"
                after="$(ls -1 "$ROOT/lib" | wc -l || true)"
                if [ "$after" != "$before" ]; then
                  changed=1
                fi
              done
            done
          }

          recursive_copy

          rm -f "$ROOT/lib/ld-linux-"*.so* "$ROOT/lib/libc.so."* "$ROOT/lib/libm.so."* "$ROOT/lib/libpthread.so."* "$ROOT/lib/librt.so."* "$ROOT/lib/libdl.so."* || true

          patchelf --set-rpath '$ORIGIN/lib' "$ROOT/EMPE"
          for so in "$ROOT"/lib/*.so*; do
            [ -f "$so" ] || continue
            patchelf --set-rpath '$ORIGIN' "$so" || true
          done

          mkdir -p "$ROOT/share/glib-2.0/schemas"
          rsync -a /usr/share/glib-2.0/schemas/ "$ROOT/share/glib-2.0/schemas/" || true
          glib-compile-schemas "$ROOT/share/glib-2.0/schemas" || true

          mkdir -p "$ROOT/share"
          cp -r /usr/share/gtk-4.0 "$ROOT/share/gtk-4.0" 2>/dev/null || true
          mkdir -p "$ROOT/share/icons"
          cp -r /usr/share/icons/Adwaita "$ROOT/share/icons/Adwaita" 2>/dev/null || true

          LOADER_DIR="$(find /usr/lib -type d -path '*/gdk-pixbuf-2.0/2.*.*/loaders' | head -n1 || true)"
          if [ -n "$LOADER_DIR" ]; then
            mkdir -p "$ROOT/lib/gdk-pixbuf-2.0/2.10.0/loaders"
            cp -a "$LOADER_DIR/"* "$ROOT/lib/gdk-pixbuf-2.0/2.10.0/loaders/" 2>/dev/null || true
            GDK_PIXBUF_MODULEDIR="$ROOT/lib/gdk-pixbuf-2.0/2.10.0/loaders" \
              gdk-pixbuf-query-loaders > "$ROOT/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache" || true
          fi

          cat > "$ROOT/empe.sh" << 'EOF'
          #!/bin/bash
          set -e
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          export LD_LIBRARY_PATH="$SCRIPT_DIR/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
          export XDG_DATA_DIRS="$SCRIPT_DIR/share:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}"
          export GSETTINGS_SCHEMA_DIR="$SCRIPT_DIR/share/glib-2.0/schemas"
          export GDK_PIXBUF_MODULEDIR="$SCRIPT_DIR/lib/gdk-pixbuf-2.0/2.10.0/loaders"
          export GDK_PIXBUF_MODULE_FILE="$SCRIPT_DIR/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache"
          exec "$SCRIPT_DIR/EMPE" "$@"
          EOF
          chmod +x "$ROOT/empe.sh"

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: EMPE-linux
          path: build/dist/

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install cmake pkg-config gtkmm4 gtk4 abseil git create-dmg

      - name: Configure CMake
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build --config Release

      - name: Create macOS App Bundle
        shell: bash
        run: |
          set -euo pipefail
          APP="build/EMPE.app"
          mkdir -p "$APP/Contents"/{MacOS,Resources,Frameworks}

          # Copy executable and rename to .bin; we'll use a wrapper as CFBundleExecutable
          cp build/EMPE "$APP/Contents/MacOS/EMPE.bin"

          # Create Info.plist
          cat > "$APP/Contents/Info.plist" << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>EMPE</string>
              <key>CFBundleIdentifier</key>
              <string>com.sonicsong.empe</string>
              <key>CFBundleName</key>
              <string>EMPE</string>
              <key>CFBundleVersion</key>
              <string>1.0.0</string>
              <key>CFBundleShortVersionString</key>
              <string>1.0.0</string>
              <key>NSHighResolutionCapable</key>
              <true/>
          </dict>
          </plist>
          EOF

          BREW_PREFIX="$(brew --prefix)"

          # Function to copy dylib deps recursively into Frameworks and fix ids
          bundle_libs() {
            local binary="$1"
            # Allow empty match without failing under pipefail
            otool -L "$binary" | grep -E '/opt/homebrew|/usr/local' | awk '{print $1}' | while read -r lib; do
              [ -n "$lib" ] || continue
              local lib_name; lib_name="$(basename "$lib")"
              if [ ! -f "$APP/Contents/Frameworks/$lib_name" ]; then
                # -L to dereference symlinks; avoid copying a symlink that points back to Homebrew
                cp -L "$lib" "$APP/Contents/Frameworks/" 2>/dev/null || true
                chmod +w "$APP/Contents/Frameworks/$lib_name" 2>/dev/null || true
                install_name_tool -id "@executable_path/../Frameworks/$lib_name" "$APP/Contents/Frameworks/$lib_name" 2>/dev/null || true
                bundle_libs "$APP/Contents/Frameworks/$lib_name"
              fi
            done || true
          }

          # Bundle libs for the binary, then fix its references
          bundle_libs "$APP/Contents/MacOS/EMPE.bin"

          otool -L "$APP/Contents/MacOS/EMPE.bin" | grep -E '/opt/homebrew|/usr/local' | awk '{print $1}' | while read -r lib; do
            [ -n "$lib" ] || continue
            lib_name="$(basename "$lib")"
            install_name_tool -change "$lib" "@executable_path/../Frameworks/$lib_name" "$APP/Contents/MacOS/EMPE.bin" 2>/dev/null || true
          done || true

          # Fix nested deps inside Frameworks to reference each other within the bundle
          for lib in "$APP/Contents/Frameworks/"*.dylib; do
            [ -f "$lib" ] || continue
            otool -L "$lib" | grep -E '/opt/homebrew|/usr/local' | awk '{print $1}' | while read -r dep; do
              [ -n "$dep" ] || continue
              dep_name="$(basename "$dep")"
              install_name_tool -change "$dep" "@executable_path/../Frameworks/$dep_name" "$lib" 2>/dev/null || true
            done || true
          done

          # Bundle GTK runtime data into Resources
          mkdir -p "$APP/Contents/Resources/share" "$APP/Contents/Resources/lib/gdk-pixbuf-2.0/2.10.0/loaders"

          # 1) GLib schemas
          rsync -a "$BREW_PREFIX/share/glib-2.0/schemas/" "$APP/Contents/Resources/share/glib-2.0/schemas/" || true
          "$BREW_PREFIX/bin/glib-compile-schemas" "$APP/Contents/Resources/share/glib-2.0/schemas" || true

          # 2) GTK shared data and icons
          cp -R "$BREW_PREFIX/share/gtk-4.0" "$APP/Contents/Resources/share/gtk-4.0" 2>/dev/null || true
          mkdir -p "$APP/Contents/Resources/share/icons"
          cp -R "$BREW_PREFIX/share/icons/Adwaita" "$APP/Contents/Resources/share/icons/Adwaita" 2>/dev/null || true

          # 3) gdk-pixbuf loaders and cache
          if [ -d "$BREW_PREFIX/lib/gdk-pixbuf-2.0/2.10.0/loaders" ]; then
            cp -a "$BREW_PREFIX/lib/gdk-pixbuf-2.0/2.10.0/loaders/"* "$APP/Contents/Resources/lib/gdk-pixbuf-2.0/2.10.0/loaders/" || true
            GDK_PIXBUF_MODULEDIR="$APP/Contents/Resources/lib/gdk-pixbuf-2.0/2.10.0/loaders" \
              "$BREW_PREFIX/bin/gdk-pixbuf-query-loaders" > "$APP/Contents/Resources/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache" || true
          fi

          # Create wrapper launcher as CFBundleExecutable to set env and exec the real binary
          cat > "$APP/Contents/MacOS/EMPE" << 'EOF'
          #!/bin/bash
          set -e
          SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
          RES="$SCRIPT_DIR/../Resources"
          export XDG_DATA_DIRS="$RES/share:${XDG_DATA_DIRS}"
          export GTK_DATA_PREFIX="$RES"
          export GDK_PIXBUF_MODULEDIR="$RES/lib/gdk-pixbuf-2.0/2.10.0/loaders"
          export GDK_PIXBUF_MODULE_FILE="$RES/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache"
          exec "$SCRIPT_DIR/EMPE.bin" "$@"
          EOF
          chmod +x "$APP/Contents/MacOS/EMPE"

      - name: Create DMG
        run: |
          create-dmg \
            --volname "EMPE" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon-size 100 \
            --app-drop-link 450 185 \
            "build/EMPE.dmg" \
            "build/EMPE.app" || cp -r build/EMPE.app build/EMPE-macos.app

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: EMPE-macos
          path: |
            build/*.dmg
            build/EMPE.app

  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            git
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-ninja
            mingw-w64-ucrt-x86_64-pkg-config
            mingw-w64-ucrt-x86_64-gtk4
            mingw-w64-ucrt-x86_64-gtkmm-4.0
            mingw-w64-ucrt-x86_64-abseil-cpp

      - name: Configure CMake
        run: |
          cmake -B build -G "Ninja" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=gcc \
            -DCMAKE_CXX_COMPILER=g++

      - name: Build
        run: cmake --build build --config Release

      - name: Bundle Windows runtime and libraries
        shell: bash
        run: |
          mkdir -p build/dist
          cp build/EMPE.exe build/dist/
          
          ldd build/EMPE.exe | grep -i mingw | awk '{print $3}' | xargs -I {} cp {} build/dist/
          
          mkdir -p build/dist/share
          cp -r /ucrt64/share/glib-2.0 build/dist/share/ 2>/dev/null || true
          cp -r /ucrt64/share/gtk-4.0 build/dist/share/ 2>/dev/null || true
          cp -r /ucrt64/share/icons build/dist/share/ 2>/dev/null || true
          
          mkdir -p build/dist/lib
          cp -r /ucrt64/lib/gdk-pixbuf-2.0 build/dist/lib/ 2>/dev/null || true
          
          mkdir -p build/dist/etc/gtk-4.0
          cat > build/dist/etc/gtk-4.0/settings.ini << EOF
          [Settings]
          gtk-theme-name=Windows-10
          gtk-font-name=Segoe UI 10
          gtk-icon-theme-name=Adwaita
          EOF
          
          cat > build/dist/empe-launcher.bat << 'EOF'
          @echo off
          set "SCRIPT_DIR=%~dp0"
          set "GTK_DATA_PREFIX=%SCRIPT_DIR%"
          set "GDK_PIXBUF_MODULEDIR=%SCRIPT_DIR%lib\gdk-pixbuf-2.0\2.10.0\loaders"
          set "GDK_PIXBUF_MODULE_FILE=%SCRIPT_DIR%lib\gdk-pixbuf-2.0\2.10.0\loaders.cache"
          set "XDG_DATA_DIRS=%SCRIPT_DIR%share"
          start "" "%SCRIPT_DIR%EMPE.exe" %*
          EOF

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: EMPE-windows
          path: build/dist/